$browser-context: 16; // Default

@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em
}

@mixin bdesktop {
  @media (min-width: #{$big-desktop-width}) {
    @content;
  }
}

// MQS

@mixin mq ($mquery) {
  
  $media-xxs:"(min-width : 320px)"; // iPhone Retina 
  $media-xs: "(min-width : 480px)"; // Telefonos
  $media-sm: "(min-width: 768px)";  // Tablets
  $media-md: "(min-width: 992px)"; // Escritorios
  $media-lg: "(min-width: 1200px)"; // Resoluciones grandes
  
  @if $mquery == xxs {
    @media #{$media-xxs} { @content; }
  }
  @if $mquery == xs {
    @media #{$media-xs} { @content; }
  }
  @else if $mquery == sm {
    @media #{$media-sm} { @content; }
  }
  @else if $mquery == md {
    @media #{$media-md}  { @content; }
  }
  @else if $mquery == lg {
    @media #{$media-lg}  { @content; }
  }
}

@mixin bgcover {
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat;
}

@mixin coverAbsolute ($z) {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: $z;
}

@mixin bgparallax {
  background-attachment: fixed;
  background-size: cover;
  background-position: center top;
}

@mixin iconSVG($path, $size){
  background-image: url($path);
  background-size: $size;
  background-repeat: no-repeat;
  background-position: center center;
  text-indent: -999999px;
  overflow: hidden;
}

// Clearfix mixin
%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin cont {
  width: 100%;
  margin: 0 auto;
  max-width: 1300px;
}

// Define default font size
@function rem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1.6rem;
}

@mixin font($size) {
  font-size: $size;
  font-size: rem($size);
}

// Gradients
@mixin background-gradient($start-color, $end-color, $orientation) { 
    background: $start-color;

    @if $orientation == 'vertical' {
      background: -webkit-linear-gradient(top, $start-color, $end-color);
      background: linear-gradient(to bottom, $start-color, $end-color);
    } @else if $orientation == 'horizontal' {
      background: -webkit-linear-gradient(left, $start-color, $end-color);
      background: linear-gradient(to right, $start-color, $end-color);
    } @else {
      background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
      background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}

// Arrows
@mixin arrow($direction, $color, $size){
    display: block;
    height: 0;
    width: 0;
    
    @if $direction == 'top' {
        border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-bottom: $size solid $color;
    } @else if $direction == 'right' {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
      border-left: $size solid $color;
    } @else if $direction == 'bottom' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
        border-left: $size solid transparent;
    } @else if $direction == 'left' {
        border-top: $size solid transparent;
      border-right: $size solid $color;
      border-bottom: $size solid transparent;
    } @else if $direction == 'top-left' {
        border-top: $size solid $color; 
        border-right: $size solid transparent;  
    } @else if $direction == 'top-right' {
        border-top: $size solid $color; 
        border-left: $size solid transparent;
    } @else if $direction == 'bottom-left' {
        border-bottom: $size solid $color; 
        border-right: $size solid transparent;  
    } @else if $direction == 'bottom-right' {
        border-bottom: $size solid $color; 
        border-left: $size solid transparent;
    }
}

// Pseudo
@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}

// Define vertical, horizontal, or both position
@mixin center($position) {
  position: absolute;
  
  @if $position == 'vertical' {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }
  @else if $position == 'horizontal' {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  }
  @else if $position == 'both' {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

// Placeholders

@mixin placeholder {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}  
}

// Layout wrapper
@mixin wrapper {
  max-width: 1242px;
  margin: 0 auto;
}

// Buttons
@mixin defBtn($size, $padding, $color, $bg, $hover) {

  // Font
  @include fontDetails($size,$td-got-lt-std,center,$white);

  padding: 8px $padding;
  border: 1px solid;
  
  background-color: $bg;
  transition: all 0.4s;
  border-radius: 0;
  border-color: $color;
  cursor: pointer;

  // Skew 
  transform: skew(-15deg); /* INVERSE SKEW */

  @include defCenter();
  &:hover {
    background-color: $hover;
  }

}


@mixin defCenter() {
    // Center - Basic
    margin: auto;
    width: 50%;
}

// Inputs
@mixin defInput() {
  background-color: $color-second;
  transition: all 0.4s;
  border-radius: 0;
  cursor: text;
  text-align: center;
  border-block-end: 10px;
  border-color: $color-third;
  color: $white;
}

// Font Text
@mixin fontText($case:lowercase,$color:$white,$size: 16px,$font: $td-got-lt-std-bd-Cn-20) {
  // Components
  display: inline-block;
  // Font
  text-transform: $case;
  @include fontDetails($size,$font,justify,$color);
}

@mixin fontDetails($size,$family,$align,$color) {
  font-size: $size;
  // @include font($size);
  font-family: $family;
  text-align: $align;
  color: $color;
}

@mixin boxDetailsElements() {
  background: $color-four;
  overflow: hidden;
  border-bottom: 1px solid $color-third !important;
  border-radius: 3px;
  box-shadow: 0 0 1px rgba(0, 0, 0, 0.1), inset 0 0 10px rgba(0, 0, 0, 0.07);
}