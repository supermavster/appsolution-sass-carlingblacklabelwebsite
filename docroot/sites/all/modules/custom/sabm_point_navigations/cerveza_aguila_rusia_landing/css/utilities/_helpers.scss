/* ==========================================================================
   Helper classes
   ========================================================================== */

/*
 * Hide visually and from screen readers
 */

.hidden {
  display: none !important;
}

.container-fluid {

  @include breakpoint(big-desktop-up) {
    max-width: 1680px;
  }
}

.container {

  @include m(full-vh) {


    & > .row {

      @include breakpoint(phone-only) {
        padding: 4rem 0 1rem;
        min-height: calc(100vh - 120px);
      }

      @include breakpoint(tablet-portrait-up) {
        height: calc(100vh - 105px);
      }

      //@media (max-height: 960px) {
      //  height: 100%;
      //}
    }
  }

  @include m(responsive-height) {
    & > .row {

      @media (max-height: 960px) {
        height: 100%;
      }
    }
  }

  @include m(ranking) {
    & > .row {

      @media (max-height: 960px) {
        min-height: 760px;
      }
    }
  }

  @include m(100vh) {

    & > .row {
      height: 100vh;

      @include breakpoint(tablet-landscape-up) {
        height: initial;
      }

      @include breakpoint(big-desktop-up) {
        height: 100vh;
      }
    }
  }

  @include m(medium) {

    & > .row {

      @include breakpoint(tablet-landscape-up) {
        height: 100vh;
      }
    }
  }

  @include m(200vh) {

    & > .row {

      @media (min-height: 960px) and (max-width: 1600px) {
        height: 100vh;
      }

      @include breakpoint(big-desktop-up) {
        height: 100vh;
      }

      //@media (min-height: 960px) and (min-width: 1680px) {
      //  height: initial;
      //}
    }
  }
}

.figure-contain {
  width: 100%;
  height: 100%;

  img {
    @extend %imgContain;
  }
}

.img-mobile {
  display: block !important;

  @include breakpoint(tablet-landscape-up) {
    display: none !important;
  }
}

.img-desktop {
  display: none !important;

  @include breakpoint(tablet-landscape-up) {
    display: block !important;
  }
}

.truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.text-initial {
  text-transform: initial !important;
}

/*
 * Hide only visually, but have it available for screen readers:
 * https://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 *
 * 1. For long content, line feeds are not interpreted as spaces and small width
 *    causes content to wrap 1 word per line:
 *    https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
 */

.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap; /* 1 */
}

/*
 * Extends the .visuallyhidden class to allow the element
 * to be focusable when navigated to via the keyboard:
 * https://www.drupal.org/node/897638
 */

.visuallyhidden.focusable:active,
.visuallyhidden.focusable:focus {
  clip: auto;
  -webkit-clip-path: none;
  clip-path: none;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto;
  white-space: inherit;
}

/*
 * Hide visually and from screen readers, but maintain layout
 */

.invisible {
  visibility: hidden;
}

/*
 * Clearfix: contain floats
 *
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that receive the `clearfix` class.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */

.clearfix:before,
.clearfix:after {
  content: " "; /* 1 */
  display: table; /* 2 */
}

.clearfix:after {
  clear: both;
}

/* Screen reader text.
 =========================================================================== */

.inline-flex {
  display: inline-flex;
}

.srt {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.ellipsis {
  text-overflow: ellipsis;

  /* Required for text-overflow to do anything */
  white-space: nowrap;
  overflow: hidden;
}

.hr {
  display: block;
  width: 100%;
  height: 2px;
  background-color: palette(black, 300);
}

// Helper classes.
@each $property in (border, margin, padding) {
  @each $direction in ('', -left, -right, -top, -bottom) {
    .#{$property}#{$direction} {
      @if $property == border {
        #{$property}#{$direction}: 1px solid palette(black, 400);
      } @else {
        #{$property}#{$direction}: 16px;
      }
      @if $direction == -top {
        &:not(.no-first):first-of-type {
          #{$property}#{$direction}: 0;
        }
      } @else if $direction == -bottom {
        &:not(.no-last):last-of-type {
          #{$property}#{$direction}: 0;
        }
      }
    }
    .no-#{$property}#{$direction} {
      #{$property}#{$direction}: 0;
      &.important {
        #{$property}#{$direction}: 0 !important;
      }
    }
  }
}

/* Colors.
 =========================================================================== */

@include generate-colors();
