
/// Calculate em values.
/// @access private
/// @group addons
///
/// @param {Number} $pixels - Font size in pixels
/// @param {Number} $context [$base-font-size] - Calculate relative to this context.
///
/// @example scss
///     font-size: em(24px, 18px);
///     //  font-size: 1.333em;

@function em($pixels, $context: $body-font-size) {
    @return ($pixels / $context) * 1em;
}

/// Calculate rem values.
/// @access private
/// @group addons
///
/// @param {Number} $pixels - Font size in pixels
///
/// @example scss
///     font-size: rem(24px);
///     //  font-size: 1.5rem;

@function rem($pixels) {
    @return ($pixels / $body-font-size) * 1rem;
}

/// Asset URL builder
/// @access private
/// @group addons
///
/// @param {String} $type - Asset type, matching folder name
/// @param {String} $file - Asset file name, including extension
///
/// @return {URL} - A `url()` function leading to the asset
@function asset($type, $file) {
    @return url($asset-base-path + '/' + $type + '/' + $file);
}

/// Image asset helper
/// @access private
/// @group addons
///
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the image
///
/// @require {function} asset
@function image($file) {
    @return asset('images', $file);
}

/// Palette helper
/// @access private
/// @group addons
///
/// @param {Map} $palette - Palette colors map
/// @param {String} $shade [base] - Shade or state of palette
@function palette($palette, $shade: 'base') {
    @return map-get(map-get($palettes, $palette), $shade);
}
