/// Import and declare the font face.
///
/// @author Felipe Castillo
/// @group addons
///
/// @param {String} $font-name - Declarative font name
/// @param {String} $file-name - Exact font filename
/// @param {Number} $weight [normal] - Font-weight
/// @param {String} $style [normal] - Font-style
///
/// @example scss
///     @include font-face('Circular', 'Circular-Bold', 700);
///     //  @font-face {
///     //      font-family: "Circular";
///     //      src: url("../fonts/Circular-Bold.eot");
///     //      src: url("../fonts/Circular-Bold.woff") format("woff"), url("../fonts/Circular-Bold.ttf") format("truetype"), url("../fonts/Circular-Bold.svg") format("svg");
///     //      font-weight: 700;
///     //      font-style: normal;
///     //  }

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: asset('fonts', $file-name + '.eot');
    src: asset('fonts', $file-name + '.woff') format('woff'),
    asset('fonts', $file-name + '.ttf') format('truetype'),
    asset('fonts', $file-name + '.svg') format('svg');
    font-weight: $weight;
    font-style: $style;
  }
}

/// Wrap BEM element inside block into declarative class.
///
/// @author Felipe Castillo
/// @group addons
///
/// @param {String} $element - Element name
///
/// @example scss
///     @include e('item') {
///         padding-left: 24px;
///         margin-top: 8px;
///     }
///     //  .nav__item {
///     //      padding-left: 24px;
///     //      margin-top: 8px;
///     //  }

@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

/// Wrap BEM modifier inside element into declarative class.
///
/// @author Felipe Castillo
/// @group addons
///
/// @param {String} $element - Modifier state
///
/// @example scss
///     @include m('is-active') {
///         background-color: #64DD17;
///     }
///     //  .nav__item--is-active {
///     //      background-color: #64DD17;
///     //  }

@mixin m($element) {
  &--#{$element} {
    @content;
  }
}

/// Generate property colors (color, background-colors and border-color) from current project palette.
///
/// @author Felipe Castillo
/// @group addons
///
/// @param {Map} $colors - Project colors palette map.
///
/// @example scss
///     @include generate-colors();
///     //  .color-primary {
///     //      color: #ef1700 !important;
///     //  }
///     //  .bg-primary {
///     //      background: #ef1700;
///     //  }
///     //  .border-primary {
///     //      border-color: #ef1700;
///     //  }

@mixin generate-colors() {
  @each $name, $color in $colors {
    .color-#{$name} {
      color: $color !important;
    }
    .background-#{$name} {
      background-color: $color !important;
    }
    .border-#{$name} {
      border-color: $color !important;
    }
  }
}

/// Spacing helpers.
/// @access private
/// @group addons
@mixin spacing-helpers() {
  $spaceamounts: (0, 8, 16, 24, 32, 40, 48, 56, 64, 72);
  $sides: (top, bottom, left, right, all);
  
  @each $space in $spaceamounts {
    @each $side in $sides {
      
      @if $side == 'all' {
        .m-#{$space} {
          margin: #{$space}px !important;
        }
        
        .p-#{$space} {
          padding: #{$space}px !important;
        }
      } @else {
        .m-#{str-slice($side, 0, 1)}-#{$space} {
          margin-#{$side}: #{$space}px !important;
        }
        
        .p-#{str-slice($side, 0, 1)}-#{$space} {
          padding-#{$side}: #{$space}px !important;
        }
      }
    }
  }
}

@mixin responsive-image($image, $ext: 'png') {
  background-image: image($image + '.' + $ext);
  background-size: cover;
  background-position: center center;
  
  @include media-breakpoint-up(lg) {
    background-image: image($image + '-desktop.' + $ext);
  }
}

@mixin section-container($img: '', $ext: 'png') {
  // Background
  @include responsive-image(#{$img}, #{$ext});
  // Border
  border-color: palette(grays, 'white');
  border-width: em(3px);
  border-top-style: solid;
  border-bottom-style: solid;
  
  @include media-breakpoint-up(lg) {
    border-width: em(4px);
  }
}

@mixin text-stroke($color, $blend) {
  position: relative;
  display: block;
  $size: 5px;
  @extend %text-stroke;
  
  &::before {
    @include stroke($color, $blend, ($size / 1.75));
  
    @include media-breakpoint-up(lg) {
      @include stroke($color, $blend, $size);
    }
  }
}

@mixin stroke($color: #000, $blend: color-burn, $size: 5px) {
  $color: rgba($color, .5);
  mix-blend-mode: $blend;
  text-shadow:
    -#{$size} -#{$size} 0 $color,
    0        -#{$size} 0 $color,
    #{$size} -#{$size} 0 $color,
    #{$size}  0        0 $color,
    #{$size}  #{$size} 0 $color,
    0         #{$size} 0 $color,
    -#{$size}  #{$size} 0 $color,
    -#{$size}  0        0 $color;
}


@mixin mask($image, $blend-mode: multiply) {
  $ext: 'png';
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: image($image + '.' + $ext);
    background-size: contain;
    z-index: 1;
  }
  
  img {
    mix-blend-mode: $blend-mode;
    z-index: -1;
  }
}